@model INERADMS.Models.FeederAllocation 
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html>
<head>
    <title>SuperGIS 3D Earth Server</title>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <script type="text/javascript" src="../../ServerGate/scripts/Framework.js"></script>
    <script type="text/javascript" src="../../ServerGate/SGSEarth.js"></script>
    <script type="text/javascript" src="~/EarthApp.js"></script>
    <script type="text/javascript" src="../../ServerGate/scripts/TileLayer.js"></script>
    <script type="text/javascript" src="../../ServerGate/scripts/VectorTube.js"></script>
    <script type="text/javascript" src="../../ServerGate/scripts/Marker.js"></script>
    <script type="text/javascript" src="../../ServerGate/scripts/EPSG.js"></script>
    <script type="text/javascript" src="../../ServerGate/scripts/CoordSys.js"></script>
    <script type="text/javascript" src="../../ServerGate/scripts/Projection.js"></script>
    <script type="text/javascript" src="/ServerGate/scripts/MVTDocument.js"></script>
    @*<script type="text/javascript" src="~/Scripts/jquery-3.5.1.min.js"></script>*@
    <link rel="stylesheet" href="~/Utils/jQueryUI/jquery-ui.css" />
    <script type="text/javascript" src="~/Utils/jQueryUI/jquery-ui.js"></script>
    @*Gary Lu 20200917:核研所系統若不通外網就連不到code.jquery.com然後下面的CSS&JS取不到就會造成部分功能出包
        ANS:自己站台弄一份*@
    @*<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>*@
    <!--從中鋼系統沿用的超好用對話框-->
    <link rel="stylesheet" type="text/css" href="~/Utils/SweetAlert2/sweetalert2.min.css" />
    <script type="text/javascript" src="~/Utils/SweetAlert2/sweetalert2.min.js"></script>
    <!--Bootstrap Notify-->
    <script type="text/javascript" src="~/Utils/bootstrap-notify-3.1.3/bootstrap-notify.min.js"></script>
    <!--Trial用CS&JSS-->
    <link rel="stylesheet" type="text/css" href="~/content/base.min.css" />
    <script type="text/javascript" src="~/Scripts/jquery.timer.js"></script> 
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_3DEvents.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_ToolWindows.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_MeasureTool.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_LayerSwitch.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_CheckBox.js"></script>
    <script type="text/javascript" src="~/Scripts/TaipowerCoords_LngLat.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/Supergeo.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/Line.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_BasicMapControl.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_AlertMarkers.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_FeederAnalysis.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_AlertNotify.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_InfoWindow.js"></script>
    <script type="text/javascript" src="~/Scripts/Map/EarthApp_StatusEvaluation.js" charset="big5"></script>
	<script type="text/javascript" src="/ServerGate/scripts/ClusterLayer.js"></script>
	<script type="text/javascript" src="~/Scripts/jquery.cookie.min.js"></script>
    <script type="text/javascript">
      
        var earth_ = null;
        var pGlobe = null;
        var pCam = null;
        var LineSymbols = {};
		var PipeSymbols = {};
        var IconTextures = {};
        var IconSymbols = {};
        var TextSymbols = {};
		var eventMarkers = { VisibleFlag:true, fdr_labels:{} , MPoweroff:[], MFault:[], MShortcircuit:[], MTransfer:[], PPoweroff:0, PFault:0, PTransfer:0, PShortcircuit:0};
		var SEMarkers = { AutoVisible:true, GeneralVisible:true, GeneralMaxVisibleHeight: 1000 ,Autolabel:[], Generallabel:[],ufidList: []}; // Soon 1100725
		var arrowCount = 0;
        var POISym = null;
        var EquipmentClasses = [];
        var SR_3857 = EPSG.CreateSpatialReference(3857);
        var SR_4326 = EPSG.CreateSpatialReference(4326);
        var current_visible = false;
		var buffer_visible = true;
        //Gary 20201012 部分搬移到3DEvents裡面去了
        var PolyPoints = [];
        var queryResults = [];
        var QueryWindowState;
        var ImgCompass;//可轉動羅盤
        var newalert;  //notification
        var bmc;
        var stuspnl;//狀態列
		var underground = true;

        var Layers = {};
        var IconLayers = {};
        var TextOfIcon = {};
        TextOfIcon['pole'] = ['pole_t'];
        TextOfIcon['dsbnroom'] = ['dsbnroom_t'];
        TextOfIcon['Connection'] = ['connection_t'];
        TextOfIcon['breaker'] = ['breaker_t'];
        TextOfIcon['hicustomer'] = ['hicustomer_t'];
        TextOfIcon['substation'] = ['substation_t', 'substation_n'];
        TextOfIcon['switch'] = ['switch_t'];

        var LayerHeight = {};
        LayerHeight['dsbnroom'] = 0.05;
        LayerHeight['pole'] = 0.1;
        LayerHeight['substation'] = 0.09;
        LayerHeight['edgechange'] = 0.1;
        LayerHeight['edgecross'] = 0.11;
        LayerHeight['node'] = 0.1;
        LayerHeight['station'] = 0.1;
        LayerHeight['mxfmr'] = 0.12;
        LayerHeight['terminal'] = 0.1;
        LayerHeight['sxfmr'] = 0.1;
        LayerHeight['switch-3'] = 0.15;
        LayerHeight['switch-2'] = 0.13;
        LayerHeight['switch-0'] = 0.12;
        LayerHeight['youxiu'] = 0.1;
        LayerHeight['distributedenergy'] = 0.11;
        LayerHeight['jumper'] = 0.1;
        LayerHeight['breaker'] = 0.11;
        LayerHeight['hicustomer'] = 0.09;
        LayerHeight['faultindicator'] = 0.11;
        LayerHeight['capacitor'] = 0.09;

        var LayerAlias = {};
        LayerAlias['busbar'] = "匯流排";
        LayerAlias['edge0'] = "高壓導線";
		LayerAlias['edge1'] = "高壓導線";
        LayerAlias['energy'] = "再生能源";
        LayerAlias['connection'] = "直接連接";
        LayerAlias['dsbnroom'] = "配電室";
        LayerAlias['pole'] = "電桿";
        LayerAlias['substation'] = "變電所";
        LayerAlias['edgechange'] = "導線變更";
        LayerAlias['edgecross'] = "導線交叉";
        LayerAlias['node'] = "高壓節點";
        LayerAlias['station'] = "電驛";
        LayerAlias['mxfmr'] = "主變壓器";
        LayerAlias['terminal'] = "終端";
        LayerAlias['sxfmr'] = "線路變壓器";
        LayerAlias['switch-3'] = "開關";
        LayerAlias['switch-2'] = "開關";
        LayerAlias['switch-0'] = "開關";
        LayerAlias['youxiu'] = "游休";
        LayerAlias['distributedenergy'] = "再生能源";
        LayerAlias['jumper'] = "高壓跳線";
        LayerAlias['breaker'] = "斷路器";
        LayerAlias['hicustomer'] = "高壓用戶";
        LayerAlias['faultindicator'] = "故障指示器";
        LayerAlias['capacitor'] = "電容";
		var LayerFSClookup = {};
		LayerFSClookup['101'] = ['busbar'];
        LayerFSClookup['106'] = ['edge0','edge1'];
        LayerFSClookup['110'] = ['energy'];
        LayerFSClookup['122'] = ['connection'];
        LayerFSClookup['411'] = ['dsbnroom'];
        LayerFSClookup['407'] = ['pole'];
        LayerFSClookup['402'] = ['substation'];
        LayerFSClookup['131'] = ['edgechange'];
        LayerFSClookup['130'] = ['edgecross'];
        LayerFSClookup['120'] = ['node'];
        LayerFSClookup['119'] = ['station'];
        LayerFSClookup['118'] = ['mxfmr'];
        LayerFSClookup['116'] = ['terminal'];
        LayerFSClookup['115'] = ['sxfmr'];
        LayerFSClookup['114'] = ['switch-0','switch-2','switch-3'];
        LayerFSClookup['113'] = ['youxiu'];
        LayerFSClookup['109'] = ['jumper'];
        LayerFSClookup['108'] = ['breaker'];
        LayerFSClookup['107'] = ['hicustomer'];
        LayerFSClookup['103'] = ['faultindicator'];
        LayerFSClookup['102'] = ['capacitor'];
        var LineLayers = {};
        var TextLayers = {};
        var HTMLContainer = null;
        var year = (new Date).getFullYear();
		var polesample = [5009443,5009805,5009821,5015234,5016076,5016595,5016603,5016704,5016728,5016732,5016774,5016847,4792,4802,4958,5008,5015,5046,5052,5222,5232,5272,5402,5453,5758,5017567,5018052,5018061,5018070,5018074,5018176,5018218,5018220,5018227,5018250,5017143,5017225,5017238,5017290,5018407,5016505,5016554,5016657,5016666,5016672,5016689,5016708,5016717,5016782,5016813,5016822,337353,10129714,10193610,10303080,10326354,10357148];
		var pipesamplestart =[10874697,10193627,10252339,10252352,5465,10267204,10874724,10874729,10874746,10267205,10160651,10267218,10260437,6073,10129738,5014956,5501,6045,10252353,4824,332773,10874702,10348640,6050,10323098,5014700,5014623,10193622,10356835,5015447,10173834,10267203,5014682,10855232,10173835,6504,10812665,10874734,6503,5015651,5391];
		var pipesampleend = [10129737,10252352,10173529,10267204,10357153,10267205,5015435,5014957,6073,10913342,10941410,10160650,10407764,5501,6045,4824,5015436,10874702,10348640,6050,6075,10267206,10193625,10267203,5720430,10173835,6504,10812665,6503];
		var _3DSample = [];
        var level1_err = 5;
        var level2_err = 10;
        var estResults = [];
        var est_result_interval = 2000;
        var est_result_time;
		var udpreceivelist = [];

        window.getServicePath = function () { return 'http://192.168.1.103' };
        window.getRootPath = function () { return 'http://192.168.1.103/INER3_M/' };
        //window.getServicePath = function () { return 'https://demo.supergeotek.com' };
        //window.getRootPath = function () { return 'https://demo.supergeotek.com/ineradms_integration/' };

		function AlertLocate(Method, Value)
		{
			function FeederLineCallBack(TPCCoord)
			{
				var TPC = new TaipowerCoordinateTransform();
				var LngLatValue = TPC.TPCPointToLngLat(TPCCoord);
				Positioning.DoByLngLat(LngLatValue.X, LngLatValue.Y);
			}
			if (Method == "feederName" || Method == "FEEDER")
				$.post("@Url.Action("PositioningUsingFeeder", "GisMap")", { FeederID: Value }, function (ret) {
					if (ret.ProcessFlag)
						FeederLineCallBack(ret.ProcessMessage);
				});
			else if (Method == "Coordinate" || Method == "TPC_GRID")
			{
				FeederLineCallBack(Value);
			}
		}

		function ReceiveUDP(value)
		{
			var values = value.split(",");
			if (values.length != 4)
				return;
			if (values[0] != "SCADAUI")
				return;
			values[2] = values[2].split("=");
			if (values[1] == "11" && values[2][0] == "TPC_GRID")
			{
				if(values[3] == $.cookie('SCADAIP'))
					AlertLocate(values[2][0], values[2][1]);
				var udpmessage = {type: values[2][0], location: values[2][1], source: values[3]};
				udpreceivelist.push(udpmessage);
			}
			else if (values[1] == "21" && values[2][0] == "FEEDER")
			{
				if(values[3] == $.cookie('SCADAIP'))
					AlertLocate(values[2][0], values[2][1]);
				var udpmessage = {type: values[2][0], location: values[2][1], source: values[3]};
				udpreceivelist.push(udpmessage);
			}
			UDPInfoBuild();
		}
		
		function UDPInfoBuild() {
			$('#tb').empty();
			for(var i = 0 ; i < udpreceivelist.length; i++)
			{
				var locateinfo = udpreceivelist[i];
				var source = locateinfo.source;
				var type = locateinfo.type;
				var location = locateinfo.location;
				$('#tb').append("<tr id='tr_" + i + "' ><td style='width:120px'>" + source + "</td><td style='width:120px'>" + location + "</td><td style='width:87px'><img src='../images/ToolWindow/Locate.svg' id='est_locateBtn_" + location + "'></td></tr>");
			}
			 $('#tb').find("img[id*='est_locateBtn_']").bind('click', function () {
				var id = ($(this).attr("id")).replace("est_locateBtn_", "");
				if(id.length < 8)
					AlertLocate("FEEDER", id)
				else
					AlertLocate("TPC_GRID", id)
			});
		}


        var ws = new WebSocket("@Url.Action("WS", "GisMap", null, Request.Url.Scheme.Replace("http", "ws"), Request.Url.Authority)");
        ws.onopen = function () { };
        ws.onmessage = function (r) { ReceiveUDP(r.data);};

        var wsdb = new WebSocket("@Url.Action("DBWS", "GisMap", null, Request.Url.Scheme.Replace("http", "ws"), Request.Url.Authority)");
        wsdb.onopen = function () { };
        //先蓋一下
        wsdb.onmessage = function (r) {
            if (r.data) {
                var rec = JSON.parse(r.data);
                var pref = null;
                var notifyswitch = null;//是否顯示通知的開關
                if (rec.table == "alertlist") {
                    pref = "alert";
                    if (rec.data.alert_res == 1) {
                        notifyswitch = AlertNotifyState.GISAlert;
                    } else {
                        notifyswitch = AlertNotifyState.SCADAAlert;
                    }
                }
                else if (rec.table == "filterlist") {
                    pref = "filter";
                    notifyswitch = AlertNotifyState.SCADAFilterAlert && rec.data["filter_trigger"];
                }
                if (pref)
				{
                    var recdata = {
                        sname: rec.data[pref + "_sname"] || "",
                        ename: rec.data[pref + "_ename"] || "",
                        pname: rec.data[pref + "_pname"] || "",
                        remark: rec.data[pref + "_remark"] || "",
                        level: rec.data[pref + "_level"] || "",
                        coor: rec.data[pref + "_coor"] || ""
                    };
                    //Gary Lu 20201112改成正式Notification式取消Sweetalert2在此的運用
                    //(Sweetalert2他處彈對話訊息還要用)
                    if (notifyswitch) {
                        var normalizelvl = recdata.level.replace("A", "").replace("L", ""); SEMarkers.GeneralMaxVisibleHeight
                        $.notify({
                            title: "<img src='../images/Notification/AL" + normalizelvl + ".png'/>告警通知<br />"
                            , message: "位於 " + recdata.coor + " 的 " + recdata.sname + " (" + recdata.ename + ") 之 " + recdata.pname + " 設備異常," + recdata.remark
                            , url: "javascript:AlertLocate('Coordinate','" + recdata.coor + "');"
                            , target: "_self"
                        });
                    }
				}
            }
        };

        $(document).ready(function () {
            /*--2D3D圖台切換效果--*/
            $("#Btn2DModeMap").click(function () {
                if ($(this).hasClass("GisMapModeButton_Off")) {
                    $(this).addClass("GisMapModeButton_On");
                    $(this).removeClass("GisMapModeButton_Off");
                    $("#Btn3DModeMap").addClass("GisMapModeButton_Off");
                    $("#Btn3DModeMap").removeClass("GisMapModeButton_On");
                }
                _2D();
            });
            $("#Btn3DModeMap").click(function () {
                if ($(this).hasClass("GisMapModeButton_Off")) {
                    $(this).addClass("GisMapModeButton_On");
                    $(this).removeClass("GisMapModeButton_Off");
                    $("#Btn2DModeMap").addClass("GisMapModeButton_Off");
                    $("#Btn2DModeMap").removeClass("GisMapModeButton_On");
                    earth_.GetCamera().Pitch = 45;
                }
                _3D();
            });
            //Gary : 20200929預設開啟2D圖台時功能BAR上3D圖台限定的功能藏起來
            //沒辦法呼叫_2D和trigger是部分元件尚未初始化完成 對undefined存取屬性會出槌
            $("#divGisMapToolBoxPanel").css("width", "600px");
            $("#BtnPipeDistMeasure").hide();
            $("#BtnGroundHoleTool").hide();
            $("#BtnSectionalViewTool").hide();
            //可進行拓樸處理的設備類別於一開始圖台開啟就載進來放著，免得每次開啟窗格就要再讀一次，
			
            $.post("../GisMap/GetEquipmentClassByTopology", null, function (res) {
                if (res.ProcessFlag) {
                    ToolWindowBarControl.TopologyEquipmentClasses = JSON.parse(res.ProcessMessage);
                }
            });
			
            //$(window).on("beforeunload", function () {
            //    wsdb.close();
            //});

        });

        function documentLoad() {
			$("#information").html("核能研究所版權所有 ©" + year + "，提供之圖資設備資訊僅供參考");
            SuperGIS.Initialize(window.getServicePath() + "/ServerGate/", function () {
                SuperGIS.ServerEarth.Initialize(InitEarth);
            });
        }

        var host_url = "../磚New/";
        //var host_url = "https://demo.supergeotek.com/ineradms/磚/";
        //var host_url = "https://demo.supergeotek.com/核研所/磚/";

        function InitEarth() {
            var pBody = new SuperGIS.Windows.HTMLContainer(document.getElementById("body"));
            HTMLContainer = pBody;

            var sHost = location.href;
            var idx = sHost.indexOf("/", 8);
            if (idx >= 0) sHost = sHost.substring(0, idx);
            CreateHTML5Earth(pBody, function (pEarth) {
                var material = pEarth.CreateModelMaterial(0, pEarth.CreateColor(0, 0, 0, 1));
                // 載入定義圖示的文件
                //Gary 20200923:not originally by Gary但還是換個modern點的寫法(COG ASKED)
                var OCTIcons = $.get("../icons/OCTIcons.txt");
                $.when(OCTIcons).done(function (OCTIcons) {
                    var toload = 0;
                    var lines = OCTIcons.split('\r\n');
                    for (var ln in lines) {
                        var val = lines[ln];
                        if (val.length == 0)
                            continue;

                        toload++;
                        var texture = pEarth.CreateModelTexture(null);
                        IconTextures[val] = texture;
                        var img = new Image;
                        img.src = "../icons/" + val + ".png";
                        img.onload = function () {
                            toload--;
                            if (toload == 0)
                                EarthLoaded(pEarth); // 等 Icons 載完
                        }
                        texture.SetupTexture(img, 50, 50, 1);
                    }
                });
				
                $.when($.post("../GisMap/GetEquipmentClassByTopology")).done(function (EquipmentClasses) {
                    console.log(EquipmentClasses);
                    if (EquipmentClasses.ProcessFlag) {
                        var arrClasses = JSON.parse(EquipmentClasses.ProcessMessage);
                        //達成類似輸入框的placeholder效果
                        $("#selEquipmentClass").append("<option value='' disabled selected hidden>類別</option>");
                        $("#selEquipmentClass2").append("<option value='' disabled selected hidden>類別</option>");
                        for (var i = 0; i < arrClasses.length; i += 1) {
                            $("#selEquipmentClass").append(new Option(arrClasses[i].devicename, arrClasses[i].fsc));
                            $("#selEquipmentClass2").append(new Option(arrClasses[i].devicename, arrClasses[i].fsc));
                        }
                    }
                });
				
                /*var xhr = new XMLHttpRequest();
                xhr.open('GET', '../icons/OCTIcons.txt');
                xhr.onreadystatechange = function () {
                    var toload = 0;
                    if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
                        var lines = xhr.responseText.split('\r\n');
                        for (var ln in lines) {
                            var val = lines[ln];
                            if (val.length == 0)
                                continue;

                            toload++;
                            var texture = pEarth.CreateModelTexture(null);
                            IconTextures[val] = texture;
                            var img = new Image;
                            img.src = "../icons/" + val + ".png";
                            img.onload = function () {
                                toload--;
                                if (toload == 0)
                                    EarthLoaded(pEarth); // 等 Icons 載完
                            }
                            texture.SetupTexture(img, 50, 50, 1);
                        }
                    }
                }
                xhr.send();*/
            });

            function EarthLoaded(pEarth) {
                earth_ = pEarth;
                pEarth.Scene.BackgroundColor = pEarth.CreateColor(0.2, 0.2, 0.2, 1);
				pEarth.Scene.BackgroundImage = pEarth.CreateModelTexture("../images/sky_Soon.jpg");
				pEarth.Scene.DynamicBackground = true;
                pEarth.SetupSystem(false, SR_3857);
                pEarth.HasTerrain = false;
                //pEarth.TileQuality = SuperGIS.DDDCore.TileQuality.High;
                POISym = new SuperGIS.DDDCore.Marker2DSymbol(null, pEarth.CreateVector2(0.5, 1, SuperGIS.DDDCore.VectorUnits.Proportion, SuperGIS.DDDCore.VectorUnits.Proportion));

                _3DMouseUpDown.GWall = pEarth.CreateModelTexture("@Url.Content("../images/GisMap/Wall.jpg")");
                _3DMouseUpDown.GBottom = pEarth.CreateModelTexture("@Url.Content("../images/GisMap/bottom.jpg")");

                Basemap = new SuperGIS.TileLayer("https://demo.supergeotek.com/INER_NLSCEMAP/Agent.aspx",
                    pEarth, { layer: 'mask', sr: SR_3857 }, null);
                Basemap.setVisible(true);
                Photo = new SuperGIS.TileLayer("https://wmts.nlsc.gov.tw/wmts",
                    pEarth, { layer: 'PHOTO2' }, null);
                Photo.setVisible(false);

                // VectorTileLayers 為新的載入一次資料, 建立多圖層的方式

				LineData = new MVTDocument(host_url + "LineData", pEarth, {minzoom: 13, maxzoom: 13, loadlayers: ["edge0"]}, function (name, features) {
					LineFinish(name, features);
				});

				LineData1 = null;

                IconData = new SuperGIS.VectorTileLayers(host_url + "IconData",
                    pEarth, ['pole', 'dsbnroom', 'substation', 'edgechange', 'edgecross','node', 'mxfmr', 'terminal', 'sxfmr', 'distributedenergy', 'jumper', 'switch-3', 'switch-2', 'switch-0', 'youxiu', 'breaker', 'hicustomer', 'faultindicator', 'capacitor'],
                    function (layer) { IconReady(layer); },
                    function (array, layer) { IconFinish(array, layer); });

                TextData = null;

				//Soon 1100725 再生能源群聚顯示
				GeneratingCluster = new SuperGIS.ClusterLayer(
					pEarth, 
					{ 	geojson: window.getRootPath() + '/GeneratingUnit3857.json',
						clusterRadius: 30,
						paint: { 'circle-color': '#00ff00',
								'circle-stroke-color': '#ffffff',
								'circle-radius': 4,
								'cluster-color': ['#00ff00', 50, '#ffff00', 100, '#ff8c00'],
								'cluster-stroke-color': ['#ffffff', 50, '#ffffff', 100, '#ffffff'],
								'cluster-radius': [15, 50, 25, 100, 35],
								'text-size': 12,
								'text-font': 'Microsoft JhengHei',
								'text-color': 'black' }
					},
					null);				
				GeneratingCluster.setMinMaxVisibleHeight(100, 90000);
				GeneratingCluster.Visible = false;
				Layers["distributedenergycluster"] = GeneratingCluster;
				
				FCICluster = new SuperGIS.ClusterLayer(
					pEarth, 
					{ 	geojson: window.getRootPath() + '/FCI.json',
						clusterRadius: 30,
						paint: { 'circle-color': '#00ff00',
								'circle-stroke-color': '#ffffff',
								'circle-radius': 4,
								'cluster-color': ['#00ff00', 50, '#ffff00', 100, '#ff8c00'],
								'cluster-stroke-color': ['#ffffff', 50, '#ffffff', 100, '#ffffff'],
								'cluster-radius': [15, 50, 25, 100, 35],
								'text-size': 12,
								'text-font': 'Microsoft JhengHei',
								'text-color': 'black' }
					},
					null);				
				FCICluster.setMinMaxVisibleHeight(100, 90000);
				FCICluster.Visible = false;
				Layers["fcicluster"] = FCICluster;
				
                //2D 角度為0  & 不傾斜
                var PosMethod = "@(Model.Method)";
                var PosValue = "@(Model.Value)";
                if (PosMethod != "" && PosValue != "") {
                    switch (PosMethod) {
                        case "feederName":
                            //饋線定位
                            Positioning.DoByFeeder(PosValue);
                            break;
                        case "Coordinate":
                            //座標定位
                            Positioning.DoByTPCCoord(PosValue);
                            break;
                    }
                } else {
                    pEarth.SetViewpoint(120.414247, 23.650445, 70000, 0, 0, false);
                }
                pEarth.AllowTilt = false;
                //Gary Lu 20201021:預設是true，不設為false，下場就是切換到3D時3D專屬窗格選項出不來
                //pEarth.SetViewpoint(120.254, 23.636, 1000, 0, 45, false);
                //pEarth.SetViewpoint(120.5423, 23.7106, 138, 0, 0, false);

                pGlobe = pEarth.GetGlobe();
                pCam = pEarth.GetCamera();
                pScene = pEarth.GetScene();
				pCam.addEventListener("changed", CameraChanged, false);
                pEarth.addEventListener("mousedown", _3DMouseUpDown.MouseDown, false);
                pEarth.addEventListener("mouseup", _3DMouseUpDown.MouseUp, false);
                pEarth.addEventListener("mousemove", _3DMouseUpDown.MouseMove, false);
                pEarth.addEventListener("dblclick", _3DMouseUpDown.DBLClick, false);
                pScene.addEventListener("endrender", _3DMouseUpDown.EndRender, false);
				if(!underground)
					pScene.GetEngine().UsingDepthTesting = false;
                stuspnl = pEarth.CreateStatusPanel();
                //est_result_time = setTimeout(function () { CheckEstResult(); }, est_result_interval);

            /*--按鈕按出新視窗--*/
                $("#BtnStatusEvaluationTool").click(function () {
                    ToolWindowBarControl.OpenStatusDialog();
                    //WriteUserLog(7);
                });

                $("#BtnMeasureTool").click(function () {
                    ToolWindowBarControl.OpenMeasureDialog();
                    WriteUserLog(6);
                });
                $("#BtnLayersTool").click(function () {
                    ToolWindowBarControl.OpenLayerDialog();
                    WriteUserLog(5);
                });
                $("#BtnPositioningTool").click(function () {
                    ToolWindowBarControl.OpenPositioningDialog();
                });
                $("#BtnPipeDistMeasure").click(function () {
                    ToolWindowBarControl.OpenPipeDistDialog();
                    WriteUserLog(11);
                });
                $("#BtnGroundHoleTool").click(function () {
                    ToolWindowBarControl.OpenGroundHoleDialog();
                    WriteUserLog(10);
                });
                $("#BtnSectionalViewTool").click(function () {
                    ToolWindowBarControl.OpenProfileDialog();
                    WriteUserLog(9);
                });
                $("#BtnFeederLineTool").click(function () {
                    ToolWindowBarControl.OpenFeederAnalysisDialog();
                });
                $("#BtnAlertNotifySwitchPanel").click(function () {
                    ToolWindowBarControl.OpenNotificationDialog();
                });
                $("#divGisMapToolBoxPanel").css("width", "600px");
                $("#BtnPipeDistMeasure").hide();
                $("#BtnGroundHoleTool").hide();
                $("#BtnSectionalViewTool").hide();
                select(0);
                _3DMouseUpDown.TurnClickQueryOnOff();
                $("#navQueryWindow").addClass("ClosingNav");
                $("#aToggleButton").find("i").addClass("fa-caret-right");
                QueryWindowState = false;
                $("#aToggleButton").click(function (e) {
                    if (QueryWindowState) {
                        $("#aToggleButton").find("i").removeClass("fa-caret-left");
                        $("#aToggleButton").find("i").addClass("fa-caret-right");
                        $("#navQueryWindow").removeClass("OpeningNav");
                        $("#navQueryWindow").addClass("ClosingNav");
                    } else {
                        $("#aToggleButton").find("i").removeClass("fa-caret-right");
                        $("#aToggleButton").find("i").addClass("fa-caret-left");
                        $("#navQueryWindow").removeClass("ClosingNav");
                        $("#navQueryWindow").addClass("OpeningNav");
                    }
                    QueryWindowState = (!QueryWindowState);
                    e.preventDefault();
                });

                bmc = new BasicMapControl(earth_);
                INERAlertings.Initialize();
                AlertLocate("@Request["Method"]", "@Request["Value"]");
                ImgCompass = new GNavigationPanel(HTMLContainer, pEarth);

                if (blnUpdate) {
                    setTimeout(function () { _3DMouseUpDown.CheckChangeInfo(); }, _3DMouseUpDown.changeinfo_interval);
                }

                
            }
        }
        /**
         * 設定初始位置
         */
        function SetInitialPosition(newEarth) {
            newEarth.SetViewpoint(120.414247, 23.650445, 70000, 0, 0, newEarth.AllowTilt);
        }

		function CameraChanged()
		{
			if(LineData1 == null)
			{
				if(pCam.Position.Z < 7500)
				{
					LineData1 = new MVTDocument(host_url + "LineData", earth_, {minzoom: 13, maxzoom: 13, loadlayers: ['busbar', 'edge1', 'energy', 'connection']}, function (name, features) {
								LineFinish(name, features);
							});
				}
			}
			if(TextData == null)
			{
				if(pCam.Position.Z < 10000)
				{
					TextData = new MVTDocument(host_url + "TextData", earth_, {maxzoom: 15});
				}
			}
			
			// Soon 1100725 一般開關可視高度
			if(SEMarkers.GeneralVisible)
            {
                if (pCam.Position.Z < SEMarkers.GeneralMaxVisibleHeight)
				{
					for(var i = 0; i < SEMarkers.Generallabel.length; i++)
						SEMarkers.Generallabel[i].Visible = true;
				}
				else
				{
					for(var i = 0; i < SEMarkers.Generallabel.length; i++)
						SEMarkers.Generallabel[i].Visible = false;
				}
			}
		}

        var down_x, down_y;
        function MouseDown(tEvent) {
            down_x = tEvent.x;
            down_y = tEvent.y - tEvent.currentTarget.offsetTop;
            //y值要排除掉offsetTop(實際上不屬於圖台的上面系統標題帶與功能帶的高度)
            _3DMouseUpDown.MouseDown(tEvent);
        }
        function MouseUp(tEvent) {
            _3DMouseUpDown.MouseUp(tEvent);
        }

        function HexToRGB(hex) {
            if (hex.charAt(0) == '#')
                hex = hex.substring(1, hex.length);
            var r = parseInt(hex.substring(0, 2), 16) / 255;
            var g = parseInt(hex.substring(2, 4), 16) / 255;
            var b = parseInt(hex.substring(4, 6), 16) / 255;
            return [r, g, b];
        }

        // 由於目前所有線圖層欄位皆同, 因此未作 layer 判別
        function AddArrow(feature, oid, clr)
		{
			var pts = feature.geometry[0];
			var dir = feature.values["dir"];
			var rgb = clr;
			if (current_visible)
				rgb = rgb + "FF";
			else
				rgb = rgb + "00";
			var size;
			for (var i = 0; i < pts.length - 3; i += 3)
			{
				size = 1;
				var first, second;
				if (dir == 1)
				{
					first = pts.slice(i, i + 3);
					second = pts.slice(i + 3, i + 6);
				}
				else
				{
					first = pts.slice(i + 3, i + 6);
					second = pts.slice(i, i + 3);
				}

				var dist = (first[0] - second[0]) * (first[0] - second[0]) + (first[1] - second[1]) * (first[1] - second[1]);
				var angle = Math.atan((first[1] - second[1]) / (second[0] - first[0]));
				var tmps = [];
				if(arrowCount % 4 == 0)
				{
					if (dist >= 400 && feature.name == 'edge0')
					{
						var aps_13 = CreateArrowPoints(first, second, angle, 36);
						tmps.push(earth_.AddPolygonSurface(oid, aps_13, rgb, "", 8, 11));
					}
					if (dist >= 400)
					{
						var aps_14 = CreateArrowPoints(first, second, angle, 12);
						tmps.push(earth_.AddPolygonSurface(oid, aps_14, rgb, "", 12, 13));
					}
				}
				arrowCount++;
				if (dist >= 100)
				{
					var aps_14 = CreateArrowPoints(first, second, angle, 3);
					tmps.push(earth_.AddPolygonSurface(oid, aps_14, rgb, "", 14, 18));
				}
				for (var j = 0; j < tmps.length; j++)
				{
					var surface = tmps[j];
					surface.fp = first;
					surface.sp = second;
					surface.dir = dir;
					if (_3DMouseUpDown.g_surfaces[oid] == null)
						_3DMouseUpDown.g_surfaces[oid] = [surface];
					else
						_3DMouseUpDown.g_surfaces[oid].push(surface);
				}
			}
		}
		// 20210326
		function CreateArrowPoints(p1, p2, angle, size)
		{
			var sina = Math.sin(angle);
			var cosa = Math.cos(angle);
			var x = (p1[0] + p2[0]) / 2;
			var y = (p1[1] + p2[1]) / 2;
			var	x1 = x + size * sina;
			var	y1 = y + size * cosa;
			var x2 = x - size * sina;
			var y2 = y - size * cosa;
			var x3, y3;
			size *= 3;
			var tx1 = x - size * cosa;
			var ty1 = y + size * sina;
			var tx2 = x + size * cosa;
			var ty2 = y - size * sina;
			var d1 = (tx1 - p2[0]) * (tx1 - p2[0]) + (ty1 - p2[1]) * (ty1 - p2[1]);
			var d2 = (tx2 - p2[0]) * (tx2 - p2[0]) + (ty2 - p2[1]) * (ty2 - p2[1]);
			if (d1 < d2)
			{
				x3 = tx1;
				y3 = ty1;
			}
			else
			{
				x3 = tx2;
				y3 = ty2;
			}
			return [x1, y1, x2, y2, x3, y3];
		}

        // 20201201
        function ProcessSurfaceGeometry(pGlobe, sWKT) {
            var pos = sWKT.indexOf('(');
            var type = sWKT.slice(0, pos);
            sWKT = sWKT.trim();

            var minX = null;
            var maxX = null;
            var minY = null;
            var maxY = null;
            if (type == "POLYGON") {
                var pGeos = [];
                sWKT = sWKT.slice(pos + 1, sWKT.lastIndexOf(')'));
                var rings = sWKT.trim().split('),');
                for (var i = 0; i < rings.length; i++) {
                    var ring = rings[i].slice(1, rings[i].length - 1);
                    var pairs = ring.trim().split(',');
                    var pts = [];
                    for (var j = 0; j < pairs.length; j++) {
                        var pair = pairs[j];
                        var xyz = pair.trim().split(' ');
                        pts.push(parseFloat(xyz[0]), parseFloat(xyz[1]), 0);
                    }
                    CoordinateTransform(true, pGlobe.SpatialReference, s_WGS84, pts, pts.length / 3);
                    for (var j = 0; j < pts.length; j += 3) {
                        pGeos.push(pts[j], pts[j + 1]);
                        if (minX == null || pts[j] < minX) minX = pts[j];
                        if (maxX == null || pts[j] > maxX) maxX = pts[j];
                        if (minY == null || pts[j + 1] < minY) minY = pts[j + 1];
                        if (maxY == null || pts[j + 1] > maxY) maxY = pts[j + 1];
                    }
                }
                return { Points: pGeos, Extent: [minX, maxY, maxX, minY], Type: type };
            }
            else if (type == "LINESTRING") {
                var pGeos = [];
                sWKT = sWKT.slice(pos + 1, sWKT.lastIndexOf(')'));
                var pairs = sWKT.trim().split(',');
                var pts = [];
                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i];
                    var xyz = pair.trim().split(' ');
                    pts.push(parseFloat(xyz[0]), parseFloat(xyz[1]), 0);
                }
                CoordinateTransform(true, pGlobe.SpatialReference, s_WGS84, pts, pts.length / 3);
                for (var i = 0; i < pts.length; i += 3) {
                    pGeos.push(pts[i], pts[i + 1]);
                    if (minX == null || pts[i] < minX) minX = pts[i];
                    if (maxX == null || pts[i] > maxX) maxX = pts[i];
                    if (minY == null || pts[i + 1] < minY) minY = pts[i + 1];
                    if (maxY == null || pts[i + 1] > maxY) maxY = pts[i + 1];
                }
                return { Points: pGeos, Extent: [minX, maxY, maxX, minY], Type: type };
            }

            return null;
        }

        // 20201201
        function CreateArrowGeometry(surface, dir) {
            var first = (surface.dir == dir) ? surface.fp : surface.sp;
            var second = (surface.dir == dir) ? surface.sp : surface.fp;
            var angle = Math.atan((first[1] - second[1]) / (second[0] - first[0]));
			var size;
			if (surface.maxLevel == 11)
				size = 36;
			else if (surface.maxLevel == 13)
				size = 12;
			else if (surface.maxLevel == 18)
				size = 3;
			var aps = CreateArrowPoints(first, second, angle, size)
						var wkt = "POLYGON((" + aps[0].toString() + " " + aps[1].toString() + "," +
								aps[2].toString() + " " + aps[3].toString() + "," +
								aps[4].toString() + " " + aps[5].toString() + "))";
			return ProcessSurfaceGeometry(pGlobe, wkt);
        }

        // 20201201
        function CreateXGeometry(surface) {
            var first = surface.fp;
            var second = surface.sp;
            var angle = Math.atan((first[1] - second[1]) / (second[0] - first[0]));
            var angle1 = angle + 40;
            var angle2 = angle - 40;

            var sina = Math.sin(angle1);
            var cosa = Math.cos(angle1);
            var x = (first[0] + second[0]) / 2;
            var y = (first[1] + second[1]) / 2;
            var x1 = x + 12 * sina;
            var y1 = y + 12 * cosa;
            var x2 = x - 12 * sina;
            var y2 = y - 12 * cosa;
            sina = Math.sin(angle2);
            cosa = Math.cos(angle2);
            var x3 = x + 12 * sina;
            var y3 = y + 12 * cosa;
            var x4 = x - 12 * sina;
            var y4 = y - 12 * cosa;

            var wkt = "LINESTRING(" + x1.toString() + " " + y1.toString() + "," +
                x2.toString() + " " + y2.toString() + "," + x.toString() + " " + y.toString() + "," +
                x3.toString() + " " + y3.toString() + "," + x4.toString() + " " + y4.toString() + ")";
            return ProcessSurfaceGeometry(pGlobe, wkt);
        }

        // 20201201
        function UpdateSurface(pm, dir, clr) {
            var oid = GetValue(pm, "oid");
			var fdr = pm.values.fdr1;
            var surfaces = _3DMouseUpDown.g_surfaces[oid];
			var surfaces2 = _3DMouseUpDown.g_surfaces2[oid];
			if (dir != -2) // -2 視為異常, 不用變電流方向
			{
				for (var i in surfaces)
				{
					var surface = surfaces[i];
					if (dir == 99 || dir == -1)
						surface.Visible = false;
					else
					{
						surface.Visible = true;
						surface.Geometry = CreateArrowGeometry(surface, dir);
					}

					var rgb = (clr != null) ? clr.slice(0) : HexToRGB(GetValue(pm, "symcolor"));
					for (var j = 0; j < 3; j++)
						rgb[j] = rgb[j] * 255;

					var hc = "#";
					for (var j = 0; j < 3; j++)
						hc += rgb[j].toString(16).padStart(2, '0');
					hc += (current_visible) ? "ff" : "00";
					surface.Style = hc;

					for (var j = 0; j < surface.CoveredTiles.length; j++)
						surface.CoveredTiles[j].Invalidate();
				}
			}

			if (surfaces2 == null) // buffer 未建
			{
				if (dir == 99 || dir == -1 || dir == -2)
				{
					_3DMouseUpDown.g_surfaces2[oid] = [];
					for (var i in surfaces)
					{
						var wkt50 = CreateBufferWKT(surfaces[i], 75);
						//var wkt100 = CreateBufferWKT(surfaces[i], 100);
						if(buffer_visible)
							var rgb = (dir == 99) ? "#bebebeff" : (dir == -1) ? "#ffb4b4ff" : "#ff7f27ff";
						else
							var rgb = (dir == 99) ? "#bebebe00" : (dir == -1) ? "#ffb4b400" : "#ff7f2700";
						var buffer50 = earth_.AddSurface(oid, wkt50, rgb, "", 6, 18);
						//var buffer100 = earth_.AddSurface(oid, wkt100, rgb, "", 6, 12);
						_3DMouseUpDown.g_surfaces2[oid].push(buffer50);
						//_3DMouseUpDown.g_surfaces2[oid].push(buffer100);
					}
				}
			}
			else
			{
				for (var i in surfaces2)
				{
					var surface = surfaces2[i];
					if (dir != 99 && dir != -1 && dir != -2)
						surface.Visible = false;
					else
					{
						surface.Visible = true;
						if(buffer_visible)
							var rgb = (dir == 99) ? "#bebebeff" : (dir == -1) ? "#ffb4b4ff" : "#ff7f27ff";
						else
							var rgb = (dir == 99) ? "#bebebe00" : (dir == -1) ? "#ffb4b400" : "#ff7f2700";
						surface.Style = rgb;
					}
					for (var j = 0; j < surface.CoveredTiles.length; j++)
						surface.CoveredTiles[j].Invalidate();
				}
			}
        }

		function CreateBufferWKT(surface, r)
		{
			var f = surface.fp;
			var s = surface.sp;
			var angle = Math.atan((f[1] - s[1]) / (s[0] - f[0]));

			var sina = Math.sin(angle);
			var cosa = Math.cos(angle);
			//var r = 50;
			var pts = [];
			pts.push([f[0] - r * sina, f[1] - r * cosa]);
			for (var i = 30; i <= 180; i += 30)
			{
				var a = (f[0] > s[0]) ? -i : i;
				sina = Math.sin(angle + a * Math.PI / 180);
				cosa = Math.cos(angle + a * Math.PI / 180);
				pts.push([f[0] - r * sina, f[1] - r * cosa]);
			}
			sina = Math.sin(angle);
			cosa = Math.cos(angle);
			pts.push([f[0] + r * sina, f[1] + r * cosa]);
			pts.push([s[0] + r * sina, s[1] + r * cosa]);
			for (var i = 30; i <= 180; i += 30)
			{
				var a = (f[0] > s[0]) ? -i : i;
				sina = Math.sin(angle + a * Math.PI / 180);
				cosa = Math.cos(angle + a * Math.PI / 180);
				pts.push([s[0] + r * sina, s[1] + r * cosa]);
			}

			var wkt = "POLYGON((";
			for (var i = 0; i < pts.length; i++)
			{
				wkt += pts[i][0].toString() + " " + pts[i][1].toString();
				if (i != pts.length - 1)
					wkt += ",";
			}
			wkt += "))";
			return wkt;
		}

        // 20201119
        function LineFinish(name, features) {
			var depth = -5;
			for (var i = 0; i < features.length; i++)
			{
				var feature = features[i];
				feature.name = name;
				var tid = feature.values["tid"];
				var oid = feature.values["oid"];
				var clr = feature.values["symcolor"];

				if (name == "edge0" || name == "edge1") // 導線才加電流方向
					AddArrow(feature, oid, clr);

				var id = tid.toString() + "." + oid.toString();
				if (_3DMouseUpDown.g_pms[id] == null)
					_3DMouseUpDown.g_pms[id] = [feature];
				else
					_3DMouseUpDown.g_pms[id].push(feature);

                //Soon needed this
				if (oid == "10220714" | oid == "5078923" | oid == "10991758" | oid == "10134515") {
					var pts = feature.geometry[0];
					var wkt = "LINESTRING(";
					for (var j = 0; j < pts.length; j += 3) {
						wkt += (pts[j].toString() + ' ' + pts[j + 1].toString() + ' ' + depth.toString());
						if (j == pts.length - 3)
							wkt += ')';
						else
							wkt += ',';
					}
					depth += 1;
					var rgb = HexToRGB(clr)
					var pipe = earth_.CreatePlacemark("", wkt);
					pipe.DDDSymbol = earth_.CreateRoundPipeSymbol(earth_.CreateModelMaterial(0, earth_.CreateColor(rgb[0], rgb[1], rgb[2], 1)), 0.2, 0.1);
					pipe.BelowSurface = true;
					pipe.PreserveGeometry = true;
					earth_.PlacemarkObjects.Add(pipe);
				}
				
				var fdr = feature.values["fdr1"];
				var ohug = feature.values["ohug"];
				if(fdr == 62)
				{					
					var symbol = null;
					if(ohug == 0)
					{
						var pts = feature.geometry[0];
						var wkt = "LINESTRING(";
						for (var j = 0; j < pts.length; j += 3) {
							wkt += (pts[j].toString() + ' ' + pts[j + 1].toString() + ' ' + ohug0_height.toString());
							if (j == pts.length - 3)
								wkt += ')';
							else
								wkt += ',';
						}
						var pipe = earth_.CreatePlacemark("3DPipes", wkt);
						symbol = PipeSymbols[clr];
						if(!symbol)
						{
							var rgb = HexToRGB(clr);
							symbol = PipeSymbols[clr] = earth_.CreateSimpleDDDLineSymbol(earth_.CreateModelMaterial(0, earth_.CreateColor(rgb[0], rgb[1], rgb[2], 1)));
						}
					}
					else
					{
						var pts = feature.geometry[0];
						var wkt = "LINESTRING(";
						for (var j = 0; j < pts.length; j += 3) {
							wkt += (pts[j].toString() + ' ' + pts[j + 1].toString() + ' ' + ohug1_depth.toString());
							if (j == pts.length - 3)
								wkt += ')';
							else
								wkt += ',';
						}
						var pipe = earth_.CreatePlacemark("3DPipes", wkt);
						symbol = PipeSymbols[clr];
						if (!symbol)
						{
							var rgb = HexToRGB(clr);
							symbol = PipeSymbols[clr] =
								earth_.CreateSimpleDDDLineSymbol(earth_.CreateModelMaterial(0, earth_.CreateColor(rgb[0], rgb[1], rgb[2], 1)));
						}
						pipe.BelowSurface = true;
					} 
					pipe.DDDSymbol = symbol;
					pipe.Visible = false;
					pipe.PreserveGeometry = true;
					earth_.PlacemarkObjects.Add(pipe);					
					_3DSample.push(pipe);
					
					if(pipesamplestart.includes(oid))
					{
						var pts = feature.geometry[0];
						var wkt = "LINESTRING(";
						wkt += (pts[0].toString() + ' ' + pts[1].toString() + ' ' + ohug0_height.toString() + ',');
						wkt += (pts[0].toString() + ' ' + pts[1].toString() + ' ' + ohug1_depth.toString() + ',');
						wkt += ')';
		
						var pipe = earth_.CreatePlacemark("3DPipes", wkt);
						symbol = PipeSymbols[clr];
						pipe.DDDSymbol = symbol;
						pipe.PreserveGeometry = true;
						pipe.Visible = false;
						earth_.PlacemarkObjects.Add(pipe);
						_3DSample.push(pipe);
					}
					if(pipesampleend.includes(oid))
					{
						var pts = feature.geometry[0];
						var end = pts.length - 3;
						var wkt = "LINESTRING(";
						wkt += (pts[end].toString() + ' ' + pts[end + 1].toString() + ' ' + ohug0_height.toString() + ',');
						wkt += (pts[end].toString() + ' ' + pts[end + 1].toString() + ' ' + ohug1_depth.toString() + ',');
						wkt += ')';
						var pipe = earth_.CreatePlacemark("3DPipes", wkt);
						symbol = PipeSymbols[clr];
						pipe.DDDSymbol = symbol;
						pipe.PreserveGeometry = true;
						pipe.Visible = false;
						earth_.PlacemarkObjects.Add(pipe);
						_3DSample.push(pipe);
					}
				}

            }
            _3DMouseUpDown.changedDevices = []; // 使強制 CheckChangeInfo
        }

        function IconReady(layer) {
            Layers[layer.Name] = IconLayers[layer.Name] = layer;
            layer.TextureMixType = SuperGIS.DDDCore.TextureMixType.Plus;
            layer.maxVHeight = 600;
        }
        function IconFinish(array, layer) {
            var h;
			if(underground)
				h = LayerHeight[layer.Name];
            var bbox = layer.BoundingBox;
			var pLayerOrigin = [(bbox.MinX + bbox.MaxX) / 2, (bbox.MinY + bbox.MaxY) / 2, 0];
			pGlobe.CartesiansFromGeodetics(1, pLayerOrigin, pLayerOrigin);
            for (var i = 0; i < array.length; i++) {
                var mark = array[i];
                mark.Name = layer.Name;
                var tid = mark.GetFieldValueByIndex(1);
				var oid = mark.GetFieldValueByIndex(2);
                var clr = mark.GetFieldValueByIndex(6);
                var height = mark.GetFieldValueByIndex(10);
                var width = mark.GetFieldValueByIndex(11);
                var ang = mark.GetFieldValueByIndex(12);
                var sym = mark.GetFieldValueByIndex(13);
                var ostatus = mark.GetFieldValueByIndex(15);
				var fdr = mark.GetFieldValues().fdr1;
				var ohug = mark.GetFieldValues().ohug;
                var texture = IconTextures[sym];
                if (!texture)
                    console.log("no texture: " + sym);

                if (tid == 114 && ostatus == 0) // 常用開關為黑
                    clr = "#000000";

                var symbol = IconSymbols[clr + sym];
                if (!symbol) {
                    var rgb = HexToRGB(clr);
                    // 底色皆設為透明 (需搭配 TextureMixType.Plus), 藉此由線條呈現效果, 包括 Highlight
                    var material = earth_.CreateModelMaterial(0, earth_.CreateColor(rgb[0], rgb[1], rgb[2], 0));
                    symbol = IconSymbols[clr + sym] = earth_.CreateSimpleDDDFillSymbol(material, null);
                    symbol.Texture = texture;
                }

                var pts = mark.Geometry[0].pGeoArr;
                pts.splice(pts.length - 3, pts.length);
                var sum_x = 0, sum_y = 0;
                for (var j = 0; j < pts.length; j += 3) {
                    sum_x += pts[j];
                    sum_y += pts[j + 1];
                }
                var pt = { X: sum_x / (pts.length / 3), Y: sum_y / (pts.length / 3), Z: 0 };
                var w = Math.sqrt((pts[0] - pts[3]) * (pts[0] - pts[3]) + (pts[1] - pts[4]) * (pts[1] - pts[4])) / 2;
                if (pGlobe.IsGCS()) {
                    pt = SpatialReference.CoordinateTransform(SR_3857, SR_4326, null, pt);
                    w /= 111000;
                }
                if (mark.Name == 'sxfmr')
                    w = w * 1.3;

                mark.Geometry = null;
                mark.Centroid = pt;
                mark.DDDSymbol = symbol;
				if(fdr == 62 && ohug == 0)
					mark.ReplaceZ = 12;
				else if(fdr == 62)
					mark.ReplaceZ = -2;
                var pMesh = new SuperGIS.DDDCore.Mesh;
                mark.SetMeshes([{ PrimitiveType: SuperGIS.DDDCore.PrimitiveType.Triangles, Mesh: pMesh }]);

                var varCoord = [];
                var varNormal = [];
                var varTexture = [];
                var varIndex = [];

                var xy = [];
                var sin = Math.sin(ang * Math.PI / 180);
                var cos = Math.cos(ang * Math.PI / 180);
                var pts = [[-w, w], [-w, -w], [w, w], [w, -w]];
                for (var j in pts) {
                    var x = pts[j][0];
                    var y = pts[j][1];
                    var xp = x * cos - y * sin;
                    var yp = y * cos + x * sin;
                    xy.push(pt.X + xp, pt.Y + yp, h);
                }
                varIndex.push(0, 1, 2, 1, 2, 3);
                varTexture.push(0, 1, 0, 0, 1, 1, 1, 0);

                pGlobe.CartesiansFromGeodetics(xy.length / 3, xy, xy);
                for (var j = 0; j < xy.length; j += 3) {
                    varCoord.push(xy[j] - pLayerOrigin[0], xy[j + 1] - pLayerOrigin[1], xy[j + 2] - pLayerOrigin[2]);
                    varNormal.push(0, 0, 1);
                }

                pMesh.setVertexCoord(varCoord);
                pMesh.setVertexNormal(varNormal);
                pMesh.setTextureCoord(varTexture);
                pMesh.setIndex(varIndex);


                var id = tid.toString() + "." + oid.toString();
				if (_3DMouseUpDown.g_pms[id] == null)
					_3DMouseUpDown.g_pms[id] = [mark];
				else
					_3DMouseUpDown.g_pms[id].push(mark);

				if (mark.Name == "pole" && polesample.includes(oid))
				{
					var url = "http://192.168.3.119/INERADMS/Fac/Electrical_Distribution.kmz";
					kml = earth_.CreateKMLDocument('', url, "");
					kml.setModelAlignment(0, 0, null);
					earth_.PlacemarkObjects.Add(kml);
					pt84 = SpatialReference.CoordinateTransform(SR_3857, SR_4326, null, pt);
					kml.setUserDefinedLocation(pt84.X, pt84.Y, 0);
					kml.setScale(1);
					kml.setRotation(180);
					kml.BelowSurface = true;
					_3DSample.push(kml);
				}
				if (mark.Name == "switch-0" && (oid == "5010448" | oid == "5010449" | oid == "5010450" | oid == "5010451")) {
					var url = "http://192.168.3.119/INERADMS/Fac/RB套裝整壓站.kmz";
					kml = earth_.CreateKMLDocument('', url, "");
					kml.setModelAlignment(0, 0, null);
					earth_.PlacemarkObjects.Add(kml);
					pt84 = SpatialReference.CoordinateTransform(SR_3857, SR_4326, null, pt);
					kml.setUserDefinedLocation(pt84.X, pt84.Y, -5);
					kml.setScale(3);
					kml.setRotation(270);
					kml.BelowSurface = true;
				}
            }
                _3DMouseUpDown.changedDevices = []; // 使強制 CheckChangeInfo

        }


        var lastPitch = 0;
        function _2D() {
            if (earth_.AllowTilt == false)
                return;

            earth_.AllowTilt = false;
            lastPitch = pCam.Pitch;
            var pos = pCam.LookAtGeodetic;
            if (!pGlobe.IsGCS()) {
                var pt = { X: pos[0], Y: pos[1], Z: 0 };
                pt = SpatialReference.CoordinateTransform(SR_3857, SR_4326, null, pt);
                pos[0] = pt.X;
                pos[1] = pt.Y;
            }
            earth_.SetViewpoint(pos[0], pos[1], pCam.Position.Z, pCam.Yaw, 0, false);
            //$("#divGisMapToolBoxPanel").css("width", "600px");
            $("#BtnPipeDistMeasure").hide();
            $("#BtnGroundHoleTool").hide();
            $("#BtnSectionalViewTool").hide();
        }
        function _3D() {
            //if (earth_.AllowTilt == true)
            //    return;

            earth_.AllowTilt = true;
            var pos = pCam.Position;
            var z = pos.Z;
            z /= 111000;
            if (!pGlobe.IsGCS())
                pos = SpatialReference.CoordinateTransform(SR_3857, SR_4326, null, pos);
            var dx = z * Math.sin(pCam.Yaw * Math.PI / 180);
            var dy = z * Math.cos(pCam.Yaw * Math.PI / 180);
            earth_.SetViewpoint(pos.X - dx, pos.Y - dy, pos.Z, pCam.Yaw, lastPitch, false);

            //Gary:Soon said 欣中有的這三個功能也提供給核研所
            //$("#divGisMapToolBoxPanel").css("width", "960px");
            $("#BtnPipeDistMeasure").show();
            $("#BtnGroundHoleTool").show();
            $("#BtnSectionalViewTool").show();
        }
        function LayerManager() {
            $("#div_layer").dialog("open");
        }
        function BaseMapVisible() {
            Tile.setVisible(!Tile.getVisible());
        }
        function LayerVisible(name) {
            if (name == "switch") {
                Layers["switch-0"].Visible = !Layers["switch-0"].Visible;
                Layers["switch-2"].Visible = !Layers["switch-2"].Visible;
                Layers["switch-3"].Visible = !Layers["switch-3"].Visible;
            }else if (name == "current_dir")
			{
				var surfaces = earth_.GetSurfaces();
				for (var i in _3DMouseUpDown.g_surfaces)
				{
					var surfaces = _3DMouseUpDown.g_surfaces[i];
					for (var j in surfaces)
					{
						var sf = surfaces[j];
						if (current_visible)
							sf.Style = sf.Style.slice(0, 7) + "00";
						else
							sf.Style = sf.Style.slice(0, 7) + "FF";
						for (var j in sf.CoveredTiles)
						{
							var tile = sf.CoveredTiles[j];
							tile.Invalidate();
						}
					}
				}
				earth_.Invalidate();
				current_visible = !current_visible;
			}
			else if (name == "edge0")
			{
				LineData.SetLayerVisible(name, !LineData.GetLayerVisible(name));
			}
			else if (name == "edge1" || name == "busbar" || name == "energy" || name == "connection")
			{
				LineData1.SetLayerVisible(name, !LineData1.GetLayerVisible(name));
			}
			else if (name == "annotation" || name == "dsbnroom_t" || name == "pole_t" || name == "substation_t" || name == "substation_n" || name == "connection_t" || name == "switch_t" || name == "breaker_t" || name == "hicustomer_t")
			{
				TextData.SetLayerVisible(name, !TextData.GetLayerVisible(name));
			}
			else if (name == "buffer")
			{
				for (var i in _3DMouseUpDown.g_surfaces2)
				{
					var surfaces = _3DMouseUpDown.g_surfaces2[i];
					for (var j in surfaces)
					{
						var sf = surfaces[j];
						if (buffer_visible)
							sf.Style = sf.Style.slice(0, 7) + "00";
						else
							sf.Style = sf.Style.slice(0, 7) + "FF";
						for (var j in sf.CoveredTiles)
						{
							var tile = sf.CoveredTiles[j];
							tile.Invalidate();
						}
					}
				}
				earth_.Invalidate();
				buffer_visible = !buffer_visible;
			}
			else if (name == "3DPipes")
			{
				for(var i = 0; i < _3DSample.length; i++)
					_3DSample[i].Visible = !_3DSample[i].Visible;
			}
			else
				Layers[name].Visible = !Layers[name].Visible;

            var t_names = TextOfIcon[name];
            if (t_names) {
                for (var i in t_names)
                    LayerVisible(t_names[i]);
            }
            earth_.Invalidate();
        }
        function DeviceVisible() {
            for (var i in IconLayers)
                IconLayers[i].Visible = !IconLayers[i].Visible;
            for (var i in TextLayers)
                TextLayers[i].Visible = !TextLayers[i].Visible;
            earth_.Invalidate();
        }

        // ex: ChangeIconColor(["5061745", "5061743", "81988"], [1, 1, 0]);
        function ChangeIconColor(oids, clr) {
            oids = oids.slice();
            for (var i in IconLayers) {
                var layer = IconLayers[i];
                var tiles = layer.GetRenderTile();
                for (var j in tiles) {
                    var tile = tiles[j];
                    var pms = tile.GetPlacemarks();
                    for (var k in pms) {
                        var pm = pms[k];
                        var oid = pm.GetFieldValueByIndex(2);
                        for (var n in oids) {
                            if (oid == oids[n]) {
                                pm.Highlight([clr[0], clr[1], clr[2], 0], false);
                                oids.splice(n, 1);
                                break;
                            }
                        }
                        if (oids.length == 0)
                            return;
                    }
                }
            }
        }
        function select(i) {
            var tLabelWidth = $($("#divQueryBoxSwitchPanel").find(".switch-tab-title")[0]).width();
            var tBarWidth = $($("#divQueryBoxSwitchPanel").find(".switch-tab-title")[i]).width();
            var tLabelWidth2 = $($("#divQueryBoxSwitchPanel2").find(".switch-tab-title")[0]).width();
            var tBarWidth2 = $($("#divQueryBoxSwitchPanel2").find(".switch-tab-title")[i]).width();
            $("#divQueryBoxSwitchPanel").find(".scroll-bar").width(tBarWidth);
            $("#divQueryBoxSwitchPanel").find(".scroll-bar").css("transform", "translate3d(" + (i * tLabelWidth) + "px, 0px, 0px)");
            $("#divQueryBoxSwitchPanel2").find(".scroll-bar").width(tBarWidth2);
            $("#divQueryBoxSwitchPanel2").find(".scroll-bar").css("transform", "translate3d(" + (i * tLabelWidth2) + "px, 0px, 0px)");
            switchDiv(i);
        }
        function switchDiv(i) {
            if (i == 0) {
                //饋線查詢
                $("#divKeyInFeederSeries").show();
                $("#divKeyInFeederSeries2").show();
                $("#divQueryContent").find("label").hide();
                $("#divQueryContent2").find("label").hide();
                $("#divClearQueryResult").hide();
                _3DMouseUpDown.MouseType = ClickFor.PointQuery;
            }
            else {
                //框選查詢
                $("#divKeyInFeederSeries").hide();
                $("#divKeyInFeederSeries2").hide();
                $("#divQueryContent").find("label").show();
                $("#divQueryContent2").find("label").show();
                $("#divClearQueryResult").show();
                _3DMouseUpDown.MouseType = ClickFor.PolygonSelect;
                _3DMouseUpDown.RemovePipe();
            }
        }
        function DoKeyInQuery(mode) {
            var FSC;
            var CodeText;
            if (mode == 0) {
                //from 圖台上的輸入框
                FSC = $("#selEquipmentClass").val();
                CodeText = $("#iptQueryFeederNo").val();
                $("#selEquipmentClass2").val(FSC);
                $("#iptQueryFeederNo2").val(CodeText);
            } else {
                //from 查詢結果上方
                FSC = $("#selEquipmentClass2").val();
                CodeText = $("#iptQueryFeederNo2").val();
                $("#selEquipmentClass").val(FSC);
                $("#iptQueryFeederNo").val(CodeText);
            }
            _3DMouseUpDown.ExecuteKeyInQuery(FSC, CodeText);
        }

		//20210324
		function IsPlacemark(obj)
		{
			return (obj.DDDSymbol != null);
		}
		function GetValue(obj, field)
		{
			var result;
			if(IsPlacemark(obj))
				result = obj.GetFieldValue(field);
			else
				result = obj.values[field]
			return result;
        }
		
		/*
        function SameResult(re1, re2) {
            for (var i in re1.values) {
                if (re1.values[i] != re2.values[i])
                    return false;
            }
            return true;
        }

        function CheckEstChange(arr1, arr2) {
            if (arr1.length != arr2.length)
                return true;

            for (var i = 0; i < arr1.length; i++) {
                if (!SameResult(arr1[i], arr2[i]))
                    return true;
            }
            return false;
        }

        function SortEstResult(r1, r2) {
            return (r1.auto > r2.auto) ? -1 : 1;
        }

        function EstResult_Locate(id) {
            //var select = document.getElementById("EstResult_Sel");
            var marker = estResults[id].marker;
            earth_.SetViewpoint(marker.pos84.X, marker.pos84.Y, pCam.Position.Z, 0, 0, false);
        }

        function ClearEstResult() {
            for (var i = 0; i < estResults.length; i++) {
                var r = estResults[i];
                earth_.PlacemarkObjects.Remove(r.marker.getPlacemark());
            }
            estResults = [];
			SEMarkers.Autolabel = [];
			SEMarkers.Generallabel = [];
			SEMarkers.ufidList = [];
        }
        var list_interval = null;
        function EstResult_Refresh() {
            
            ClearEstResult();

            if (list_interval != null)
                clearInterval(list_interval);

            list_interval = setInterval(function () {
                if (estResults.length > 0) {
                    clearInterval(list_interval);
                    list_interval = null;
                    RefreshEstList();
                }
            }, 100);
        }

       

        function CheckEstResult() {
            var url = window.getServicePath() + "/FeederAnalysis/GetEstimationResult"; //Soon 1100725
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", url, true);
            xmlHttp.send(null);
            xmlHttp.onload = function (e) {
                var tmp_results = JSON.parse(e.target.responseText);
                if (!CheckEstChange(tmp_results, estResults)) {
                    setTimeout(function () { CheckEstResult(); }, est_result_interval);
                    return;
                }
                // 清空上次估測運算 placemarks
                ClearEstResult();

                estResults = tmp_results.slice();
                // 將自動化開關往前排, 顯示上優先
                tmp_results.sort(SortEstResult);
				estResults.sort(SortEstResult);

                var TPC = new TaipowerCoordinateTransform();
                for (var i = 0; i < tmp_results.length; i++) {
                    var r = tmp_results[i];
                    var values = r.attributes.values;
                    var feederid = values[1]; // 饋線編號
                    var coordinate = values[2]; // 圖號坐標
                    var loopid = values[3]; // 迴路別
                    var tmps = new Array(6);
                    tmps[0] = { v: values[15], n: "T相電壓" };
                    tmps[1] = { v: values[14], n: "S相電壓" };
                    tmps[2] = { v: values[13], n: "R相電壓" };
                    tmps[3] = { v: values[21], n: "T相電流" };
                    tmps[4] = { v: values[20], n: "S相電流" };
                    tmps[5] = { v: values[19], n: "R相電流" };
                    var max_id = 0;
                    for (var j in tmps) {
                        if (Math.abs(tmps[j].v) >= Math.abs(tmps[max_id].v))
                            max_id = j;
                    }
                    r.max_err = tmps[max_id].v; // 最大誤差值
                    r.err_label = tmps[max_id].n;
					// Soon 1100725 建立估測結果坐標清單，用於開關設備資訊視窗比對
					SEMarkers.ufidList.push(r.oid);
                    // 建立 marker 
                    var vr = (Math.round(values[4] * 1000) / 1000).toFixed(3);
                    var vs = (Math.round(values[5] * 1000) / 1000).toFixed(3);
                    var vt = (Math.round(values[6] * 1000) / 1000).toFixed(3);
                    var label = "VR: " + vr + "; VS: " + vs + "; VT: " + vt;
                    var pos3857 = TPC.TPCPointToEPSG3857(coordinate); // 圖號轉 3857
                    r.marker = new SuperGIS.Marker(earth_, pos3857, label, null, { FontSize: r.auto ? 20 : 15 });
                    r.marker.pos84 = TPC.TPCPointToLngLat(coordinate); // 額外記經緯度, 供定位
					// Soon 1100725 建立marker陣列區分一般開關label與自動化開關label
                    if (r.auto) {
                        var pm = r.marker.getPlacemark();
						pm.Visible = SEMarkers.AutoVisible;
						SEMarkers.Autolabel.push(pm);
                        if (Math.abs(r.max_err) > level2_err)
                            pm.TextSymbol.Color = earth_.CreateColor(1, 0, 0, 1);
                        else if (Math.abs(r.max_err) > level1_err)
                            pm.TextSymbol.Color = earth_.CreateColor(1, 0.6, 0, 1);
                    }
					else  
					{
						var pm = r.marker.getPlacemark();
						pm.Visible = SEMarkers.GeneralVisible;
						SEMarkers.Generallabel.push(pm);
					}
						
                }
                CameraChanged();

                setTimeout(function () { CheckEstResult(); }, est_result_interval);
            }
        }
		*/

    </script>
</head>
<body onload="documentLoad();" style="margin: 0px">
    <div id="body" style="width:100%;height:100%;">
    </div>
    @Html.Hidden("hidSCADASideIP", Model.SCADASideIP, new { id = "hidSCADASideIP" })
    @Html.Hidden("hidSCADASidePort", Model.SCADASidePort.ToString(), new { id = "hidSCADASidePort" })
    @Html.Hidden("hidLocMethod", Model.Method, new { id = "hidLocMethod" })
    @Html.Hidden("hidLocValue", Model.Value, new { id = "hidLocValue" })
    <div id="divQueryBox">
        <table id="tblQueryBox">
            <tr>
                <td>
                    <div class="switch-tab" id="divQueryBoxSwitchPanel">
                        <div class="switch-tab-title centering" style="width:50%;" onclick="select(0);">
                            <img src="~/images/GisMap/Feeder.svg" />饋線查詢
                        </div>
                        <div class="switch-tab-title centering" style="width:50%;" onclick="select(1);">
                            <img src="~/images/GisMap/AreaSelect.svg" />框選查詢
                        </div>
                        <div class="scroll-bar" id="divQueryBoxBar" style="width:100%;"></div>
                    </div>
                </td>
            </tr>
            <tr>
                <td id="divQueryContent">
                    <div id="divKeyInFeederSeries">
                        <select id="selEquipmentClass"></select>
                        <input type="text" id="iptQueryFeederNo" placeholder="饋線編號" />
                        <button type="button" id="btnQueryFeeder" onclick="DoKeyInQuery(0);"><img src="~/images/GisMap/QueryScope.svg" /></button>
                    </div>
                    <label style="display:none;">於圖面至少繪製三個點，雙擊結束繪製</label>
                </td>
            </tr>
        </table>
    </div>
	<div id="divMapBaseEventOperation">
		<div class="EventItem" id="PoweroffLocation">
            <img src="~/images/GisMap/Poweroff.svg" />
        </div>
		<div class="EventItem" id="FaultLocation">
            <img src="~/images/GisMap/Fault.svg" />
        </div>
		<div class="EventItem" id="TransferLocation">
            <img src="~/images/GisMap/Transfer.svg" />
        </div>
		<div class="EventItem" id="ShortcircuitLocation">
            <img src="~/images/GisMap/Shortcircuit.svg" />
        </div>
    </div>
    <div id="divMapBaseOperation">
        <div class="MapItem" id="dimgHome">
            <img src="~/images/GisMap/Home.svg" />
        </div>
        <div class="MapItem" id="dimgZoomIn">
            <img src="~/images/GisMap/ZoomIn.svg" />
        </div>
        <div class="MapItem" id="dimgZoomOut">
            <img src="~/images/GisMap/ZoomOut.svg" />
        </div>
    </div>
	<div id="information" style="position: absolute;    bottom: 32px;    left: 7px;    width: 350px;    font-weight: bold;    font-size: 13px;    line-height: 35px;">
	</div>
    <div id="divPowerShow" style="display:none;">
    </div>
    @*<label id="lblPowerShow" style="display:none;">
    </label>*@
    <nav id="navQueryWindow" style="display:none;">
        <a id="aToggleButton" class="nav-toggle-button">
            <!--這個i需要更換箭頭方向-->
            <i class="fas"></i>
        </a>
        <table id="tblQueryBox2">
            <tr>
                <td>
                    <div class="switch-tab" id="divQueryBoxSwitchPanel2">
                        <div class="switch-tab-title centering" style="width:50%;" onclick="select(0);">
                            <img src="~/images/GisMap/Feeder.svg" />饋線查詢
                        </div>
                        <div class="switch-tab-title centering" style="width:50%;" onclick="select(1);">
                            <img src="~/images/GisMap/AreaSelect.svg" />框選查詢
                        </div>
                        <div class="scroll-bar" id="divQueryBoxBar" style="width:100%;"></div>
                    </div>
                </td>
            </tr>
            <tr>
                <td id="divQueryContent2">
                    <div id="divKeyInFeederSeries2">
                        <select id="selEquipmentClass2"></select>
                        <input type="text" id="iptQueryFeederNo2" placeholder="饋線編號" />
                        <button type="button" id="btnQueryFeeder2" onclick="DoKeyInQuery(1);"><img src="~/images/GisMap/QueryScope.svg" /></button>
                        <button type="button" id="btnClearFeeder" onclick="_3DMouseUpDown.ClearQuery();"><img src="~/images/GisMap/WhiteX.svg" /></button>
                    </div>
                    <label style="display:none;">於圖面至少繪製三個點，雙擊結束繪製</label>
                    <div id="divClearQueryResult" style="position:absolute;right:0;bottom:-20px;width:100px;height:25px;cursor:pointer;display:none;" onclick="_3DMouseUpDown.ClearQuery();">
                        <img src="~/images/ToolWindow/X.svg" />
                        <label style="font-weight: bold; font-size: 14px; line-height: 20px; color: #344059;">清除查詢</label>
                    </div>
                </td>
            </tr>
        </table>
        <div id="tblQueryResultContainer">

            <!--查詢結果(不論輸入還是框選)的外容器(有需要出現卷軸時使用)-->
            <table id="tblQueryResult">
                <tbody></tbody>
            </table>
        </div>
    </nav>
</body>
</html>
